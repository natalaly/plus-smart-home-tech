package ru.yandex.practicum.telemetry.collector.model.sensor;

import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import java.time.Instant;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;
import ru.yandex.practicum.telemetry.collector.model.enums.SensorEventType;

/**
 * The {@link SensorEvent} is an abstract base class that represents events generated by different
 * types of sensors in a telemetry system.
 * <p>
 * Contains common attributes that all sensor events share:
 * <ul>
 *   <li>Sensor ID</li>
 *   <li>Hub ID</li>
 *   <li>Event timestamp</li>
 * </ul>
 * Subclasses of {@code SensorEvent} represent specific types of sensor events
 * (e.g., motion, temperature, light) and are registered using Jackson annotations
 * to enable polymorphic deserialization.
 */

@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.EXISTING_PROPERTY,
    property = "type",
    defaultImpl = SensorEventType.class
)
@JsonSubTypes({
    @JsonSubTypes.Type(value = MotionSensorEvent.class, name = "MOTION_SENSOR_EVENT"),
    @JsonSubTypes.Type(value = TemperatureSensorEvent.class, name = "TEMPERATURE_SENSOR_EVENT"),
    @JsonSubTypes.Type(value = LightSensorEvent.class, name = "LIGHT_SENSOR_EVENT"),
    @JsonSubTypes.Type(value = ClimateSensorEvent.class, name = "CLIMATE_SENSOR_EVENT"),
    @JsonSubTypes.Type(value = SwitchSensorEvent.class, name = "SWITCH_SENSOR_EVENT")
})
@Getter
@Setter
@ToString
public abstract class SensorEvent {

  @NotBlank
  private String id;

  @NotBlank
  private String hubId;

  private Instant timestamp = Instant.now();

  @NotNull
  public abstract SensorEventType getType();
}
